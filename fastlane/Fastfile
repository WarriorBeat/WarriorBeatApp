
# Common Functions and Requirements
# across Android/iOS Fastfiles

# Require Env
fastlane_require 'dotenv'

# Path Constants
ROOT = File.expand_path('../', Dir.pwd).freeze
PACKAGE_JSON = File.join(ROOT, 'package.json').freeze

# Scripts
SECRET_SH = File.join(ROOT, 'fastlane/scripts/load_secret.sh').freeze
SENTRY_SH = File.join(ROOT, 'fastlane/scripts/sentry.sh').freeze
TRAVIS_SH = File.join(ROOT, 'fastlane/scripts/travis.sh').freeze
CHANGELOG_SH = File.join(ROOT, 'fastlane/scripts/get_release_notes.sh').freeze
CHANGELOG_PATH = File.join(ROOT, "CHANGELOG.md").freeze

ANDROID_PATH = File.join(ROOT, 'android').freeze
IOS_PATH = File.join(ROOT, 'ios').freeze

APPCENTER_ANDROIDCONFIG = File.join(ANDROID_PATH, 'app/src/main/assets/appcenter-config.json')
APPCENTER_IOSCONFIG = File.join(IOS_PATH, 'AppCenter-Config.plist')


# Load Primary .env
Dotenv.load("%s/env/.env" % ROOT)

# Loads Env Variables by build type 
def getEnv(buildType)
  env = '%s/env/.env.%s' % [ROOT, buildType]
  target = '%s/.env' % ROOT
  UI.header("Environment")
  Dotenv.load(env)
  sh('cp', env, target)
  UI.success("Loaded #{env} => #{target}")
end


def handleEnvAndOptions(environment, options, isString=false, default=nil)
  # Tristate selector - env vars, cli options, defaults
  # Handles string and boolean types

  # see - https://github.com/TGPSKI/react-native-fastlane-boilerplate/blob/2afb85ea0993cb1cef43151d6e4cc6f30ef17913/Common#L35

  output = nil
  if isString == true
    # Handle strings
    if environment != nil
      output = environment
    elsif options != nil
      output = options
    elsif default != nil
      output = default
    else
      output = nil
    end
  else
    # Handle bools
    if environment == true
      output = true
    elsif options == true
      output = true
    else
      output = false
    end
  end
  return output
end

import "../ios/fastlane/Fastfile"
import "../android/fastlane/Fastfile"

desc("Prints Data Loaded by Fastlane")
lane :fasttest do |options|
  getEnv('dev')
  parsed_options = {
    :dumpenv => handleEnvAndOptions(
      ENV['TEST_DUMPENV'],
      options[:dumpenv],
      false,
      false
    )
  }
  UI.header("COMMON FASTLANE")
  UI.important("\n
  ROOT           | #{ROOT}
  PACKAGE.JSON   | #{PACKAGE_JSON}
  SECRET_SH      | #{SECRET_SH}
  ANDROID_PATH   | #{ANDROID_PATH}
  IOS_PATH       | #{IOS_PATH}
  ANDROID_CONFIG | #{APPCENTER_ANDROIDCONFIG}
  IOS_CONFIG:    | #{APPCENTER_IOSCONFIG}
  ENV_NODE_PATH  | #{ENV['NODE_PATH']}
  ENV_API_DEV    | #{ENV['API_DEV']}
  ENV_DEBUG      | #{ENV['DEBUG']}
  RELEASE_NOTES  | #{getReleaseNotes}
  ")
  iosfasttest
  andfasttest
  if options[:dumpenv]
    UI.header("ENV DUMP")
    ENV.each do |key, item|
      UI.important("#{key} => #{item}\n")
    end
  end
end

private_lane :injectAppcenter do |options|
  parsed_options = {
    :platform => handleEnvAndOptions(
      ENV['FASTLANE_PLATFORM_NAME'],
      options[:platform],
      true,
      ENV['FASTLANE_PLATFORM_NAME']
    ),
    :clean => handleEnvAndOptions(
      nil,
      options[:clean],
      false,
      false
    )
  }
  path = parsed_options[:platform] == 'ios' ? APPCENTER_IOSCONFIG : APPCENTER_ANDROIDCONFIG
  if parsed_options[:clean]
    sh("%s %s --clean %s" % [SECRET_SH, parsed_options[:platform], path])
  else
    sh("%s %s %s" % [SECRET_SH, parsed_options[:platform], path])
  end
end

desc("Retrieve Release notes from Changelog")
private_lane :getReleaseNotes do
  notes = sh("#{CHANGELOG_SH} #{CHANGELOG_PATH}")
end

desc("Finalize release on Sentry")
lane :sentry do |options|
  parsed_options = {
    :env => handleEnvAndOptions(
      ENV['SENTRY_ENV_STAGE'],
      options[:env],
      true,
      "staging"
    )
  }
  sentry_id = "#{APP_ID}.#{parsed_options[:env]}"
  sh("#{SENTRY_SH} #{sentry_id}")
end

# Create Temporary Keychain for Match (Travis CI)
private_lane :create_temp_keychain do |options|
  UI.important("Creating temporary keychain...")
  UI.important("Keychain Name: #{options[:name]} -- Password: #{options[:pass]}")
  # Load Env
  sh("#{TRAVIS_SH} #{ROOT}/env")
  # Create Temp Key Chain
  create_keychain(
    name: options[:name],
    password: options[:pass],
    default_keychain: true,
    unlock: true,
    timeout: 3600,
    add_to_search_list: true
  )
  # Unlock Keychain
  unlock_keychain(
    path: options[:name],
    add_to_search_list: :replace,
    password: options[:pass]

  )
end


desc("Setup Travis Build")
lane :travis do
  # Stop if not executed by CI
  if !Helper.ci?
    UI.message("Currently not running on CI system, skipping travis setup...")
    next
  end
  # Travis Setup
  UI.header("TRAVIS SETUP")
  ci_pass = "fastlane_tmp_keychain_pass"
  ci_keychain = "fastlane_tmp_keychain"
  sh("security list-keychains -d user | grep #{ci_keychain}") do |status, result|
    if !status.success?
      create_temp_keychain(name: ci_keychain, pass: ci_pass)
    else
      UI.important("Temporary Keychain #{ci_keychain} already exists, skipping...")
    end
    # Set Travis Keychain Vars
    ENV["MATCH_KEYCHAIN_NAME"] = ci_keychain
    ENV["MATCH_KEYCHAIN_PASSWORD"] = ci_pass
  end
end


desc("Reset App Icons/Edited Files")
lane :cleanup do 
  android = "#{ANDROID_PATH}/app/src/main/res"
  ios = "#{IOS_PATH}/warriorbeatapp/Images.xcassets/AppIcon.appiconset"
  sh "git checkout -- #{android} #{ios}"
  injectAppcenter(platform: 'ios', clean:true)
  injectAppcenter(platform: 'android', clean:true)
end