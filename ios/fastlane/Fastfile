# WarriorBeat
# IOS
#
# Fastfile
# Build

default_platform(:ios)

# Set Dir to Project Root
dir = File.expand_path('../../', Dir.pwd).freeze

# IOS Specific Constants
APP_ID = 'org.lamarcountyschools.ogwarriorbeat'.freeze
PROJECT_PATH = "#{IOS_PATH}/warriorbeatapp.xcodeproj".freeze
WORKSPACE_PATH = "#{IOS_PATH}/warriorbeatapp.xcworkspace".freeze
PROJECT_NAME = "warriorbeatapp".freeze
DISPLAY_NAME = "WarriorBeat".freeze

# Paths
BUILT_PRODUCTS_PATH = "#{IOS_PATH}/Build/Build/Products".freeze
INFO_PLIST_PATH = "#{IOS_PATH}/warriorbeatapp/Info.plist".freeze

# Dev
DEV_PRODUCT = "#{DISPLAY_NAME}-dev.app".freeze
DEV_SCHEME = "#{PROJECT_NAME}-dev".freeze
DEV_BUNDLE_SUFFIX = '.dev'.freeze
DEV_ID = "#{APP_ID}#{DEV_BUNDLE_SUFFIX}"

# Staging
STAGE_PRODUCT = "#{DISPLAY_NAME}-staging.app".freeze
STAGE_SCHEME = "#{PROJECT_NAME}-staging".freeze
STAGE_BUNDLE_SUFFIX = '.staging'.freeze
STAGE_ID = "#{APP_ID}#{STAGE_BUNDLE_SUFFIX}"

# Release
RELEASE_PRODUCT = "#{DISPLAY_NAME}.app".freeze
RELEASE_SCHEME = "#{PROJECT_NAME}".freeze

# App Center
APPCENTER_APP_NAME = "WarriorBeatApp-1"

# Version Constants
VERSION = get_version_number(
  xcodeproj: PROJECT_PATH,
  target: PROJECT_NAME
).freeze
BUILD_NUMBER = get_info_plist_value(
  path: INFO_PLIST_PATH,
  key: "CFBundleVersion"
)

platform :ios do

  before_all do |lane, options|
    parsed_options = {
      :skip_before => handleEnvAndOptions(
        ENV['SKIP_BEFORE'],
        options[:skip_before],
        false,
        false
      )
    }

    # Set Gym Constants
    ENV['GYM_WORKSPACE'] = WORKSPACE_PATH
    ENV['GYM_BUILD_PATH'] = "#{IOS_PATH}/Build/Build"
    ENV['GYM_DERIVED_DATA_PATH'] = "#{IOS_PATH}/Build"
    
    # Run Travis Setup if on CI
    travis

    unless parsed_options[:skip_before]
      yarn(
        command: "install",
        package_path: PACKAGE_JSON
      )
    end
  end

  after_all do |lane, options|
    parsed_options = {
      :skip_after => handleEnvAndOptions(
        ENV['SKIP_AFTER'],
        options[:skip_after],
        false,
        false
      )
    }
    unless parsed_options[:skip_after]
      cleanup
    end
  end

  desc "Update Match Certificates"
  lane :certificates do
    match(app_identifier: [DEV_ID, STAGE_ID, APP_ID])
  end

  desc "iOS Dev Build"
  lane :dev do |options|
    getEnv('dev')
    parsed_options = {
      :badge => handleEnvAndOptions(
        ENV['BADGE'],
        options[:badge],
        false,
        true
      ),
      :simulator => handleEnvAndOptions(
        ENV['SIMULATOR'],
        options[:simulator],
        false,
        false
      ),
      :clean => handleEnvAndOptions(
        ENV['CLEAN'],
        options[:clean],
        false,
        true
      ),
      :install => handleEnvAndOptions(
        ENV['INSTALL'],
        options[:install],
        false,
        false
      ),
      :xcargs => handleEnvAndOptions(
        ENV['XCARGS'],
        options[:xcargs],
        true,
        ''
      )
    }

    # Add Alpha Badge to Icon
    if parsed_options[:badge]
      add_badge(alpha:true)
    end

    # Load Dev Certs
    certificates
    match(type: 'development')

    # Build
    output_ipa = gym(
      scheme: DEV_SCHEME,
      configuration: "Debug",
      clean: parsed_options[:clean],
      xcargs: parsed_options[:xcargs],
      silent: true,
      destination: (
        parsed_options[:simulator] ?
          'generic/platform=iOS Simulator' :
          'generic/platform=iOS'
      ),
      skip_archive: parsed_options[:simulator] ? true : false,
      skip_package_ipa: parsed_options[:simulator] ? true : false,
    )

    # Install
    if parsed_options[:install]
      if parsed_options[:simulator]
        bundle = "#{BUILT_PRODUCTS_PATH}/Debug-iphonesimulator/#{PROJECT_NAME}.app"
        sh("xcrun simctl install booted #{bundle}")
      else
        bundle = "#{BUILT_PRODUCTS_PATH}/Debug-iphoneos/#{PROJECT_NAME}.app"
        install_on_device(ipa: output_ipa)
      end
    end

    cleanup
  end

  
  desc "iOS Staging Build"
  lane :stage do |options|
    getEnv('staging')
    parsed_options = {
      :badge => handleEnvAndOptions(
        ENV['BADGE'],
        options[:badge],
        false,
        true
      ),
      :simulator => handleEnvAndOptions(
        ENV['SIMULATOR'],
        options[:simulator],
        false,
        false
      ),
      :clean => handleEnvAndOptions(
        ENV['CLEAN'],
        options[:clean],
        false,
        false
      ),
      :install => handleEnvAndOptions(
        ENV['INSTALL'],
        options[:install],
        false,
        false
      ),
      :xcargs => handleEnvAndOptions(
        ENV['XCARGS'],
        options[:xcargs],
        true,
        ''
      ),
      :forRelease => handleEnvAndOptions(
        ENV['FOR_RELEASE'],
        options[:forRelease],
        false,
        false
      ),
      :release => handleEnvAndOptions(
        ENV['RELEASE'],
        options[:release],
        false,
        false
      ),
      :injectSentry => handleEnvAndOptions(
        ENV['INJECT_SENTRY'],
        options[:injectSentry],
        false,
        false
      )
    }

    # Add Alpha Badge to Icon
    if parsed_options[:badge]
      add_badge
    end

    # Load Certs
    certificates
    match(type: 'development')

    # Inject Appcenter
    if parsed_options[:forRelease] || parsed_options[:release] 
      injectAppcenter
    end

    # Inject Sentry
    if parsed_options[:injectSentry]
      sentry(inject:true)
    end

    # Build
    output_ipa = gym(
      scheme: STAGE_SCHEME,
      configuration: "Staging",
      clean: parsed_options[:clean],
      xcargs: parsed_options[:xcargs],
      silent: true,
      destination: (
        parsed_options[:simulator] ?
          'generic/platform=iOS Simulator' :
          'generic/platform=iOS'
      ),
      skip_archive: parsed_options[:simulator] ? true : false,
      skip_package_ipa: parsed_options[:simulator] ? true : false,
    )

    # Copy to Dist
    UI.important("IPA => #{output_ipa}")
    output_name = File.basename(output_ipa)
    dsym_name = File.basename(ARTIFACT_DSYM)
    dist_ipa = File.join(DIST_DIR, output_name)
    dist_dsym = File.join(DIST_DIR, dsym_name)
    FileUtils.rm(dist_ipa) if File.exists?(dist_ipa)
    FileUtils.rm(dist_dsym) if File.exists?(dist_dsym)
    Dir.mkdir(DIST_DIR) unless File.directory?(DIST_DIR)
    FileUtils.cp(output_ipa, DIST_DIR)
    FileUtils.cp(ARTIFACT_DSYM, DIST_DIR)
    
    # Skip Before Now
    ENV['SKIP_BEFORE'] = 'true'

    # Install
    if parsed_options[:install]
      if parsed_options[:simulator]
        bundle = "#{BUILT_PRODUCTS_PATH}/Staging-iphonesimulator/#{PROJECT_NAME}.app"
        sh("xcrun simctl install booted #{bundle}")
      else
        install_on_device(ipa: output_ipa)
      end
    end

    # Release Appcenter
    if parsed_options[:release]
      release(ipa: output_ipa)
    end

    # Cleanup Badges
    cleanup
  end

  desc("Release IPA on App Center")
  lane :release do |options| 
    parsed_options = {
      :ipa => handleEnvAndOptions(
        ENV['IPA_OUTPUT'],
        options[:ipa],
        true,
        "warriorbeatapp.ipa"
      ),
      :dsym => handleEnvAndOptions(
        ENV["IOS_DSYM_OUTPUT"],
        options[:dsym],
        true,
        ARTIFACT_DSYM
      ),
    }
    UI.header("iOS Deploy")
    UI.important("
    
    Releasing IPA on AppCenter...
    IPA => #{parsed_options[:ipa]}
    dSYM => #{parsed_options[:dsym]}
    Name => #{APPCENTER_APP_NAME}
    ")
    appcenter_upload(
      should_clip: false,
      release_notes: getReleaseNotes,
      app_name: APPCENTER_APP_NAME,
      ipa: parsed_options[:ipa],
      dsym: parsed_options[:dsym]
    )
  end
end

desc "Get iOS Fastlane Data"
private_lane :iosfasttest do 
  UI.header("iOS FASTLANE")
  UI.important("\n
  APP_ID         | #{APP_ID}
  PROJECT_PATH   | #{PROJECT_PATH}
  BUILD PRODUCTS | #{BUILT_PRODUCTS_PATH}
  VERSION        | #{VERSION}
  BUILD_NUM      | #{BUILD_NUMBER}
  GYM_BUILD      | #{ENV['GYM_BUILD_PATH']}
  GYM_DERIVED    | #{ENV['GYM_DERIVED_DATA_PATH']}
  ")
end